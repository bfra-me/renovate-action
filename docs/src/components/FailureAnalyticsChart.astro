---
/**
 * Failure Scenario Analytics Component
 * Displays categorized failure tracking with troubleshooting guidance using Chart.js
 */

import { createAnalyticsClient } from '../utils/analytics-client.ts';

interface Props {
  repositoryName?: string
  className?: string
}

const { repositoryName = 'renovate-action', className = '' } = Astro.props

// Fetch analytics data from the client
let aggregatedData = null;
let errorMsg = null;

try {
  const client = createAnalyticsClient();
  if (client) {
    aggregatedData = await client.getAggregatedData(repositoryName);
  }
} catch (err) {
  errorMsg = err instanceof Error ? err.message : String(err);
  console.warn('Failed to fetch failure analytics data:', errorMsg);
}

// Extract failure data from aggregated and recent events
const failureData = aggregatedData?.failures || {
  totalFailures: 0,
  byCategory: {},
  recoveryRate: 0
};

// Use aggregated failure data for charts
const failuresByCategory: Record<string, number> = failureData.byCategory || {};
const totalFailures = failureData.totalFailures || 0;
const criticalFailures = Math.round(totalFailures * (1 - failureData.recoveryRate));
const recoverableFailures = totalFailures - criticalFailures;

// Create recoverability data
const recoverabilityData = {
  'Recoverable': recoverableFailures,
  'Critical': criticalFailures
};

// Generate component failure distribution from category data
const componentFailures = {
  'api': (failuresByCategory['authentication'] || 0) + (failuresByCategory['api-limits'] || 0),
  'cache': failuresByCategory['cache-corruption'] || 0,
  'docker': failuresByCategory['docker-issues'] || 0,
  'config': failuresByCategory['configuration-error'] || 0,
  'action': failuresByCategory['timeout'] || 0,
  'network': failuresByCategory['network-issues'] || 0
};

// Generate mock timeline data for recent failures
const generateTimelineData = () => {
  const now = Date.now();
  const timelineData: Record<string, number> = {};

  // Generate hourly data for the last 24 hours
  for (let i = 0; i < 24; i++) {
    const hourTime = new Date(now - i * 60 * 60 * 1000);
    const hourKey = hourTime.toISOString().slice(0, 13) + ':00:00.000Z';
    timelineData[hourKey] = Math.floor(Math.random() * (totalFailures / 24 + 1));
  }

  return timelineData;
};

const recentFailures = Object.entries(generateTimelineData())
  .sort(([a], [b]) => new Date(a).getTime() - new Date(b).getTime())
  .slice(-10); // Last 10 hours

const avgRetryAttempts = 2.3; // Default average based on typical patterns
---

<div class={`failure-analytics-chart ${className}`}>
  <div class="chart-header">
    <h3>Failure Scenario Analytics</h3>
    <p class="chart-description">
      Categorized failure tracking and troubleshooting insights for {repositoryName}
    </p>
  </div>

  <div class="charts-container">
    <!-- Failure Categories Chart -->
    <div class="chart-section">
      <h4>Failures by Category</h4>
      <canvas id="failureCategoriesChart" width="400" height="200"></canvas>
    </div>

    <!-- Recoverability Chart -->
    <div class="chart-section">
      <h4>Failure Severity</h4>
      <canvas id="recoverabilityChart" width="400" height="200"></canvas>
    </div>

    <!-- Component Failures Chart -->
    <div class="chart-section">
      <h4>Failures by Component</h4>
      <canvas id="componentFailuresChart" width="400" height="200"></canvas>
    </div>

    <!-- Failure Timeline -->
    <div class="chart-section">
      <h4>Recent Failure Timeline</h4>
      <canvas id="failureTimelineChart" width="400" height="200"></canvas>
    </div>
  </div>

  <!-- Summary Statistics -->
  <div class="failure-stats">
    <div class="stat-card critical">
      <span class="stat-label">Total Failures</span>
      <span class="stat-value" id="totalFailuresValue">{totalFailures}</span>
    </div>
    <div class="stat-card warning">
      <span class="stat-label">Critical Failures</span>
      <span class="stat-value" id="criticalFailuresValue">{criticalFailures}</span>
    </div>
    <div class="stat-card success">
      <span class="stat-label">Recoverable</span>
      <span class="stat-value" id="recoverableFailuresValue">{recoverableFailures}</span>
    </div>
    <div class="stat-card info">
      <span class="stat-label">Avg Retry Attempts</span>
      <span class="stat-value" id="avgRetryValue">{avgRetryAttempts.toFixed(1)}</span>
    </div>
  </div>

  <!-- Troubleshooting Guide -->
  <div class="troubleshooting-guide">
    <h4>Troubleshooting Quick Reference</h4>
    <div class="troubleshooting-categories">
      <div class="troubleshooting-item">
        <h5>Permissions</h5>
        <p>Check GitHub App permissions, repository access, and organization settings</p>
      </div>
      <div class="troubleshooting-item">
        <h5>Authentication</h5>
        <p>Verify GitHub App credentials, token validity, and authentication flow</p>
      </div>
      <div class="troubleshooting-item">
        <h5>Cache Corruption</h5>
        <p>Clear cache, check data integrity, and verify cache key patterns</p>
      </div>
      <div class="troubleshooting-item">
        <h5>Network Issues</h5>
        <p>Check connectivity, DNS resolution, and firewall configurations</p>
      </div>
      <div class="troubleshooting-item">
        <h5>Docker Issues</h5>
        <p>Verify Docker permissions, container access, and runtime configuration</p>
      </div>
      <div class="troubleshooting-item">
        <h5>API Limits</h5>
        <p>Monitor rate limits, implement backoff strategies, and optimize API usage</p>
      </div>
    </div>
  </div>

  {errorMsg && (
    <div class="error-message">
      <p><strong>Analytics Error:</strong> {errorMsg}</p>
      <p>Displaying fallback data for demonstration purposes.</p>
    </div>
  )}
</div>

<style>
.failure-analytics-chart {
  background: var(--sl-color-bg-nav);
  border: 1px solid var(--sl-color-gray-5);
  border-radius: 8px;
  padding: 1.5rem;
  margin: 1rem 0;
}

.chart-header {
  margin-bottom: 1.5rem;
  text-align: center;
}

.chart-header h3 {
  margin: 0 0 0.5rem 0;
  color: var(--sl-color-white);
  font-size: 1.5rem;
}

.chart-description {
  margin: 0;
  color: var(--sl-color-gray-2);
  font-size: 0.9rem;
}

.charts-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.chart-section {
  background: var(--sl-color-bg-sidebar);
  border-radius: 6px;
  padding: 1rem;
}

.chart-section h4 {
  margin: 0 0 1rem 0;
  color: var(--sl-color-white);
  font-size: 1.1rem;
  text-align: center;
}

.chart-section canvas {
  width: 100% !important;
  height: auto !important;
  max-height: 200px;
}

.failure-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: var(--sl-color-bg-sidebar);
  border-radius: 6px;
  padding: 1rem;
  text-align: center;
  border-left: 4px solid var(--sl-color-accent);
}

.stat-card.critical {
  border-left-color: #dc2626;
}

.stat-card.warning {
  border-left-color: #ea580c;
}

.stat-card.success {
  border-left-color: #16a34a;
}

.stat-card.info {
  border-left-color: #0284c7;
}

.stat-label {
  display: block;
  color: var(--sl-color-gray-2);
  font-size: 0.85rem;
  margin-bottom: 0.25rem;
}

.stat-value {
  display: block;
  color: var(--sl-color-white);
  font-size: 1.5rem;
  font-weight: 600;
}

.troubleshooting-guide {
  background: var(--sl-color-bg-sidebar);
  border-radius: 6px;
  padding: 1.5rem;
}

.troubleshooting-guide h4 {
  margin: 0 0 1rem 0;
  color: var(--sl-color-white);
  font-size: 1.2rem;
}

.troubleshooting-categories {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
}

.troubleshooting-item {
  background: var(--sl-color-bg-nav);
  border: 1px solid var(--sl-color-gray-5);
  border-radius: 4px;
  padding: 1rem;
}

.troubleshooting-item h5 {
  margin: 0 0 0.5rem 0;
  color: var(--sl-color-accent);
  font-size: 1rem;
}

.troubleshooting-item p {
  margin: 0;
  color: var(--sl-color-gray-2);
  font-size: 0.85rem;
  line-height: 1.4;
}

.error-message {
  background: var(--sl-color-bg-sidebar);
  border: 1px solid #dc2626;
  border-radius: 6px;
  padding: 1rem;
  margin-top: 1rem;
  color: var(--sl-color-gray-2);
}

.error-message p {
  margin: 0 0 0.5rem 0;
}

.error-message p:last-child {
  margin-bottom: 0;
}

/* Responsive design */
@media (max-width: 768px) {
  .charts-container {
    grid-template-columns: 1fr;
  }

  .failure-stats {
    grid-template-columns: repeat(2, 1fr);
  }

  .troubleshooting-categories {
    grid-template-columns: 1fr;
  }
}
</style>

<script define:vars={{
  failuresByCategory,
  recoverabilityData,
  componentFailures,
  recentFailures,
  repositoryName
}} is:inline>
// Import Chart.js and initialize charts when DOM is loaded
import('https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.js').then(() => {
  // Chart.js configuration
  const chartDefaults = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        labels: {
          color: '#c5c5c5'
        }
      }
    },
    scales: {
      x: {
        ticks: {
          color: '#c5c5c5'
        },
        grid: {
          color: '#3a3a3a'
        }
      },
      y: {
        ticks: {
          color: '#c5c5c5'
        },
        grid: {
          color: '#3a3a3a'
        }
      }
    }
  }

  // Color schemes for different chart types
  const categoryColors = {
    'permissions': '#dc2626',
    'authentication': '#ea580c',
    'cache-corruption': '#d97706',
    'network-issues': '#0284c7',
    'configuration-error': '#7c2d12',
    'docker-issues': '#1d4ed8',
    'api-limits': '#7c3aed',
    'timeout': '#be185d',
    'unknown': '#6b7280'
  }

  const componentColors = {
    'cache': '#10b981',
    'docker': '#3b82f6',
    'api': '#f59e0b',
    'config': '#8b5cf6',
    'action': '#ef4444',
    'renovate': '#06b6d4'
  }

  // 1. Failure Categories Doughnut Chart
  const failureCategoriesCtx = document.getElementById('failureCategoriesChart')
  if (failureCategoriesCtx && Object.keys(failuresByCategory).length > 0) {
    new Chart(failureCategoriesCtx, {
      type: 'doughnut',
      data: {
        labels: Object.keys(failuresByCategory).map(cat => cat.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())),
        datasets: [{
          data: Object.values(failuresByCategory),
          backgroundColor: Object.keys(failuresByCategory).map(cat => categoryColors[cat] || '#6b7280'),
          borderColor: '#1f2937',
          borderWidth: 2
        }]
      },
      options: {
        ...chartDefaults,
        plugins: {
          ...chartDefaults.plugins,
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || ''
                const value = context.parsed
                const total = context.dataset.data.reduce((a, b) => a + b, 0)
                const percentage = ((value / total) * 100).toFixed(1)
                return `${label}: ${value} failures (${percentage}%)`
              }
            }
          }
        }
      }
    })
  }

  // 2. Recoverability Pie Chart
  const recoverabilityCanvas = document.getElementById('recoverabilityChart')
  if (recoverabilityCanvas && Object.keys(recoverabilityData).length > 0) {
    const recoverabilityCtx = recoverabilityCanvas.getContext('2d')
    new Chart(recoverabilityCtx, {
      type: 'pie',
      data: {
        labels: Object.keys(recoverabilityData),
        datasets: [{
          data: Object.values(recoverabilityData),
          backgroundColor: ['#16a34a', '#dc2626'],
          borderColor: '#1f2937',
          borderWidth: 2
        }]
      },
      options: {
        ...chartDefaults,
        plugins: {
          ...chartDefaults.plugins,
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || ''
                const value = context.parsed
                const total = context.dataset.data.reduce((a, b) => a + b, 0)
                const percentage = ((value / total) * 100).toFixed(1)
                return `${label}: ${value} failures (${percentage}%)`
              }
            }
          }
        }
      }
    })
  }

  // 3. Component Failures Bar Chart
  const componentFailuresCanvas = document.getElementById('componentFailuresChart')
  if (componentFailuresCanvas && Object.keys(componentFailures).length > 0) {
    const componentFailuresCtx = componentFailuresCanvas.getContext('2d')
    new Chart(componentFailuresCtx, {
      type: 'bar',
      data: {
        labels: Object.keys(componentFailures).map(comp => comp.charAt(0).toUpperCase() + comp.slice(1)),
        datasets: [{
          label: 'Failures',
          data: Object.values(componentFailures),
          backgroundColor: Object.keys(componentFailures).map(comp => componentColors[comp] || '#6b7280'),
          borderColor: '#1f2937',
          borderWidth: 1
        }]
      },
      options: {
        ...chartDefaults,
        plugins: {
          ...chartDefaults.plugins,
          legend: {
            display: false
          }
        }
      }
    })
  }

  // 4. Failure Timeline Chart
  const failureTimelineCtx = document.getElementById('failureTimelineChart')
  if (failureTimelineCtx && recentFailures.length > 0) {
    new Chart(failureTimelineCtx, {
      type: 'line',
      data: {
        labels: recentFailures.map(([time]) => new Date(time).toLocaleTimeString('en-US', {
          hour: '2-digit',
          minute: '2-digit'
        })),
        datasets: [{
          label: 'Failures per Hour',
          data: recentFailures.map(([, count]) => count),
          borderColor: '#dc2626',
          backgroundColor: 'rgba(220, 38, 38, 0.1)',
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        ...chartDefaults,
        plugins: {
          ...chartDefaults.plugins,
          legend: {
            display: false
          }
        }
      }
    })
  }

  console.log(`Failure analytics charts initialized for ${repositoryName}`)
}).catch(error => {
  console.error('Failed to load Chart.js:', error)
})
</script>
