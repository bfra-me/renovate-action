---
description: Best practices for developing and maintaining GitHub Actions in renovate-action
globs: action.yaml, .github/workflows/*.yaml, .github/workflows/*.yml
alwaysApply: false
---

# GitHub Actions Best Practices
# Guidelines for working with GitHub Actions in renovate-action

<rule>
name: github_actions_best_practices
description: Best practices for developing and maintaining GitHub Actions in renovate-action
filters:
  - type: file_path
    pattern: "action\\.ya?ml$"
  - type: file_path
    pattern: "\\.github/workflows/.*\\.ya?ml$"
actions:
  - type: suggest
    message: |
      # GitHub Actions Best Practices for Renovate Action

      ## Composite Action Structure

      1. **Action Definition**:
         - Use clear, descriptive names for inputs and outputs
         - Document each input/output with detailed descriptions
         - Include default values where appropriate
         - Group related steps logically

      2. **Input Validation**:
         - Validate required inputs early
         - Use conditional execution based on inputs
         - Consider default values for optional inputs

      3. **Version Pinning**:
         - Pin external actions to specific commit hashes
         - Include version tag comments for reference
         - Use the `# renovate: datasource=...` annotation format

      ## Workflow Design

      1. **Job Organization**:
         - Split workflows into logical jobs
         - Use job dependencies (`needs:`) for sequential execution
         - Apply concurrency controls to prevent conflicts
         - Cancel in-progress workflows when new ones start

      2. **Conditional Execution**:
         - Use path filters for selective workflow triggering
         - Apply `if:` conditions for selective step execution
         - Use environment filters for deployment workflows

      3. **Environment Configuration**:
         - Use environment variables for configuration
         - Set environment variables at appropriate scopes (step, job, workflow)
         - Use `RENOVATE_` prefix for Renovate-specific variables

      ## Security Considerations

      1. **Token Management**:
         - Use GitHub App authentication for better security
         - Limit token permissions to the minimum required
         - Use separate tokens for different operations

      2. **Secret Handling**:
         - Never log secrets or tokens
         - Use secret masking
         - Pass secrets only to steps that require them

      ## Error Handling

      1. **Graceful Failures**:
         - Set `continue-on-error: true` when appropriate
         - Use step outputs to capture and handle errors
         - Provide meaningful error messages

      ## Self-Testing

      1. **Action Testing**:
         - Include self-tests in the main workflow
         - Test the action in real workflow contexts
         - Test with different input combinations

examples:
  - input: |
      - name: Run Renovate
        uses: renovatebot/github-action@v32.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
    output: |
      - name: Run Renovate
        uses: renovatebot/github-action@fd8e2c5fqdeadbeef # v32.0.1
        with:
          token: ${{ steps.generate-token.outputs.token }}
          env-regex: '^(?:CI|GITHUB_(?:(?!PATH|ENV).)+|LOG_LEVEL|RENOVATE_\w+)$'

metadata:
  priority: high
  version: 1.0
  tags:
    - github-actions
    - workflows
    - ci-cd
    - action-development
</rule>