---
description:
globs:
alwaysApply: false
---
# MCP Server Guide Creation
# A structured approach for creating comprehensive documentation for any MCP server

<rule>
name: mcp_server_guide
description: Guidelines for creating comprehensive documentation for MCP servers and their tools
filters:
  - type: message
    pattern: "(?i)(create guide|generate documentation|document mcp|explain mcp|mcp documentation|mcp server guide)"
  - type: content
    pattern: "MCP|Model Context Protocol|mcp_|tools|server"
actions:
  - type: suggest
    message: |
      # MCP Server Guide Structure

      When creating comprehensive documentation for an MCP server, follow these guidelines:

      ## 1. Introduction Section

      - **What is the Model Context Protocol (MCP)?**
        - Brief explanation of MCP as a specification for AI assistants to use tools from external servers
        - Mention standardized interface for external system interaction

      - **Purpose of the Specific MCP Server**
        - Clear statement of the server's primary function
        - Key capabilities and use cases
        - Problem it solves for users

      - **Benefits of Using the Server's Tools**
        - List 4-6 concrete benefits with bold headers
        - Focus on practical advantages for users

      ## 2. Workflow Understanding

      - **Create a workflow diagram using Mermaid**
        - Show main processes and their relationships
        - Use flowchart TD (top-down) format
        - Include subgraphs for logical grouping

      - **Document Each Workflow Separately**
        - Name and purpose of workflow
        - Step-by-step process with numbered steps
        - Which tools are used at each step

      ## 3. Tools Reference

      - **Create a tools relationship diagram**
        - Group tools by category/function
        - Show relationships between tool categories
        - Illustrate dependencies between tools

      - **For Each Tool, Document:**
        - Full name without the 'mcp_' prefix
        - Detailed description of functionality
        - Complete list of input parameters with descriptions
        - Expected outputs
        - Do not include parameters for no-parameter tools

      ## 4. Usage Examples

      - **Create 5 Distinct Example Scenarios**
        - Each example should demonstrate a different use case
        - Structure as Human-AI conversation
        - Show tool usage in brackets without actually calling tools
        - Examples should be realistic and practical
        - Where appropriate, show multi-tool workflows
        - Include tool names without 'mcp_' prefix

      ## 5. Project-Specific Recommendations

      - **Analyze the Current Project**
        - Identify opportunities for using the server
        - Create at least 3 specific recommendations
        - Use mermaid diagrams to visualize implementation

      ## 6. Strategic Questions

      - **Create 3 Strategic Follow-up Questions**
        - Questions should explore advanced usage
        - Focus on customization and integration
        - Explain briefly why each question is valuable

      ## 7. Resources and References

      - **Include Relevant External Links**
        - Link to official documentation
        - Include related technology resources
        - Add helpful tutorials or guides

      ## Important Guidelines During Creation

      1. Never call actual MCP tools except when necessary to query for information
      2. Refer to individual tools without the 'mcp_' prefix
      3. Do not show parameter listings for tools that don't take inputs
      4. Make examples realistic and conversation-based
      5. Don't invent information about tools
      6. Use sequential thinking for planning
      7. Include mermaid diagrams for visualization
      8. Remember that the goal is to help users understand how to use the MCP server effectively

      ## Mermaid Diagram Templates

      ### Workflow Diagram
      ```mermaid
      flowchart TD
          A[First Process] --> B[Second Process]
          B --> C[Third Process]

          A --> D[Alternative Process]
          D --> C

          subgraph "Process Group 1"
          A
          B
          end

          subgraph "Process Group 2"
          D
          end

          subgraph "Final Stage"
          C
          end
      ```

      ### Tool Relationships
      ```mermaid
      flowchart TD
          A[Category 1 Tools] --> B[Category 2 Tools]
          A --> C[Category 3 Tools]
          B --> D[Category 4 Tools]
          C --> D

          subgraph "Category 1"
          A1[Tool 1]
          A2[Tool 2]
          end

          subgraph "Category 2"
          B1[Tool 3]
          B2[Tool 4]
          end

          subgraph "Category 3"
          C1[Tool 5]
          C2[Tool 6]
          end

          subgraph "Category 4"
          D1[Tool 7]
          D2[Tool 8]
          end

          A --> A1 & A2
          B --> B1 & B2
          C --> C1 & C2
          D --> D1 & D2
      ```

examples:
  - input: |
      Create a guide for the prompt_library MCP server tools
    output: |
      # Comprehensive Guide to Effective Prompting with Prompt Library

      ## Introduction

      ### What is the Model Context Protocol (MCP)?

      Model Context Protocol (MCP) is a specification that enables AI assistants to use tools provided by external servers. It creates a standardized interface for AI assistants to interact with external systems, access contextual information, and perform actions outside their standard capabilities.

      ### Purpose of the `prompt_library` MCP Server

      The `prompt_library` MCP server provides specialized tools for creating, managing, and deploying cursor rules within projects. Cursor rules are user-provided instructions that help AI assistants work more effectively with codebases by providing contextual guidance, best practices, and project-specific conventions.

      The primary purpose of `prompt_library` is to:
      - Analyze repositories to understand their structure, patterns, and technologies
      - Generate appropriate cursor rules based on the analysis
      - Manage the creation and deployment of these rules
      - Streamline the integration of cursor rules into project workflows

      ### Benefits of Using `prompt_library` Tools

      - **Automated Analysis**: Quickly analyze repositories to identify opportunities for cursor rules
      - **Standardized Rules**: Generate consistent cursor rules based on best practices
      - **Workflow Integration**: Seamlessly integrate cursor rules into existing development workflows
      - **Improved AI Assistance**: Enhance AI assistants' effectiveness by providing project-specific context and conventions
      - **Maintainable Standards**: Create living documentation of coding standards that evolve with the project

      ## Understanding Prompt Library Workflows

      ```mermaid
      flowchart TD
          A[Repository Analysis] --> B[Rule Recommendation]
          B --> C[Rule Creation]
          C --> D[Rule Deployment]

          A --> E[Custom Rules Generation]
          E --> D

          subgraph "Analysis Phase"
          A
          B
          end

          subgraph "Creation Phase"
          C
          E
          end

          subgraph "Deployment Phase"
          D
          end
      ```

      [Full workflow documentation continues...]

  - input: |
      Generate a comprehensive guide to the files_io MCP server
    output: |
      # Comprehensive Guide to the Files IO MCP Server

      ## Introduction

      ### What is the Model Context Protocol (MCP)?

      Model Context Protocol (MCP) is a specification that enables AI assistants to use tools provided by external servers. It creates a standardized interface for AI assistants to interact with external systems, access contextual information, and perform actions outside their standard capabilities.

      ### Purpose of the `files_io` MCP Server

      The `files_io` MCP server provides specialized tools for file system operations, allowing AI assistants to read, write, and manipulate files on the user's system. This enables AI assistants to help with file management tasks, code generation, and document processing.

      The primary purpose of `files_io` is to:
      - Enable reading and writing of files in various formats
      - Support file system navigation and directory operations
      - Provide utilities for file manipulation and transformation
      - Enable AI assistants to work with the local file system

      ### Benefits of Using `files_io` Tools

      - **File System Access**: Interact with the local file system to read and write files
      - **Automation Support**: Automate file-based workflows and repetitive tasks
      - **Context Awareness**: Access file content to provide contextually relevant assistance
      - **Code Management**: Generate, modify, and organize code files
      - **Document Processing**: Create and edit documentation and other text-based files

      [Guide continues with workflows, tools reference, examples, etc.]

metadata:
  priority: high
  version: 1.0
  tags:
    - mcp
    - documentation
    - guides
    - tools
</rule>
