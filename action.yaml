---
name: Renovate Action
description: Self-hosted Renovate GitHub Action
author: bfra.me

inputs:
  autodiscover:
    description: Autodiscover all repositories.
    required: false
    default: 'false'
  autodiscover-filter:
    description: Filter repositories to autodiscover.
    required: false
    default: '[]'
  branch:
    description: Run Renovate on this branch.
    required: false
  cache:
    description: Enable the Renovate cache.
    required: false
    default: 'false'
  dry-run:
    description: Perform a dry run by logging messages instead of creating/updating/deleting branches and PRs.
    required: false
    default: 'false'
  global-config:
    description: Additional global configuration for Renovate as a JSON string. This will be merged with the default configuration while preserving security boundaries.
    required: false
    default: '{}'
  log-level:
    description: Set the log level.
    required: false
    default: info
  print-config:
    description: Log the fully-resolved Renovate config for each repository, plus fully-resolved presets.
    required: false
    default: 'false'
  renovate-app-id:
    description: The ID of the GitHub App that will be used to run Renovate.
    required: true
  renovate-app-private-key:
    description: The private key of the GitHub App that will be used to run Renovate.
    required: true
  pr-body-template:
    description: Custom template for Renovate PR body content with placeholders for CI links and branding.
    required: false
    default: |
      {{{header}}}{{{table}}}{{{controls}}}{{{warnings}}}{{{notes}}}{{{changelogs}}}{{{configDescription}}}{{{footer}}}
  pr-header:
    description: Custom header content for Renovate PRs with CI build links and @bfra-me branding.
    required: false
    default: |
      <!-- ü§ñ This PR was generated by @bfra-me's self-hosted Renovate action -->

      <div align="center">

      üöÄ **Automated Dependency Update**

      [![Renovate Status for Run {{github.run_id}}](https://github.com/{{github.repository}}/actions/workflows/renovate.yaml/badge.svg)](https://github.com/{{github.repository}}/actions/runs/{{github.run_id}})

      <sub>üìã **Managed by** [@bfra-me/renovate-action](https://github.com/bfra-me/renovate-action) ‚Ä¢ **Repository**: `{{github.repository}}`</sub>

      </div>
  pr-footer:
    description: Custom footer content for Renovate PRs with documentation links and @bfra-me signature.
    required: false
    default: |
      ---

      <details>
      <summary>üìö Documentation & Support</summary>

      ### üîß Configuration & Setup
      - [Renovate Action Documentation](https://github.com/bfra-me/renovate-action/blob/main/README.md)
      - [Global Configuration Preset](https://github.com/bfra-me/renovate-config)
      - [Self-hosted Renovate Guide](https://docs.renovatebot.com/self-hosted-configuration/)

      ### üìñ Renovate Resources
      - [Configuration Options](https://docs.renovatebot.com/configuration-options/)
      - [Merge Confidence](https://docs.renovatebot.com/merge-confidence/)
      - [Dashboard Documentation](https://docs.renovatebot.com/key-concepts/dashboard/)

      ### üí¨ Support & Issues
      - [Report Action Issues](https://github.com/bfra-me/renovate-action/issues/new)
      - [Renovate Community](https://github.com/renovatebot/renovate/discussions)
      - [Configuration Help](https://docs.renovatebot.com/help/)

      </details>

      ---

      <div align="center">

      ü§ñ **Automated by [@bfra-me's self-hosted Renovate](https://github.com/bfra-me/renovate-action)**

      <sub>Powered by [Renovate Bot](https://docs.renovatebot.com/) ‚Ä¢ [View Configuration](https://github.com/bfra-me/renovate-config) ‚Ä¢ [Learn More](https://github.com/bfra-me/renovate-action/blob/main/README.md)</sub>

      </div>
  dependency-dashboard-header:
    description: Custom header content for the Renovate dependency dashboard issue with repository context and @bfra-me branding.
    required: false
    default: |
      <!-- ü§ñ This issue was generated by @bfra-me's self-hosted Renovate action -->

      > üîß **Dependency Dashboard**
      >
      > **Repository**: `{{github.repository}}` | **Managed by**: [@bfra-me/renovate-action](https://github.com/bfra-me/renovate-action)

      This issue provides an overview of Renovate's activity and status for this repository. Use this dashboard to monitor dependency updates, review pending changes, and manage Renovate's behavior.

      ## üìä Dashboard Overview

      - ‚úÖ **Active**: Renovate is monitoring this repository for dependency updates
      - üîÑ **Auto-merge**: Configured per dependency type and stability
      - üìã **Configuration**: Uses [@bfra-me global preset](https://github.com/bfra-me/renovate-config)
      - üõ°Ô∏è **Security**: Prioritizes security updates and vulnerability fixes

      ### üéØ Quick Actions

      - **Manual Run**: Check the box below to trigger a Renovate run
      - **Configuration**: Edit `.github/renovate.json5` to customize behavior
      - **Support**: [Report issues](https://github.com/bfra-me/renovate-action/issues) with the Renovate action
  dependency-dashboard-footer:
    description: Custom footer content for the Renovate dependency dashboard issue with action documentation links.
    required: false
    default: |
      ---

      ## üìö Resources & Documentation

      <details>
      <summary>üîß Configuration & Setup</summary>

      - **[Renovate Action Docs](https://github.com/bfra-me/renovate-action/blob/main/README.md)** - Self-hosted action configuration
      - **[Global Config Preset](https://github.com/bfra-me/renovate-config)** - @bfra-me organization defaults
      - **[Repository Config](.github/renovate.json5)** - Local overrides and customization
      - **[Self-hosted Guide](https://docs.renovatebot.com/self-hosted-configuration/)** - Advanced setup options

      </details>

      <details>
      <summary>üìñ Renovate Documentation</summary>

      - **[Configuration Options](https://docs.renovatebot.com/configuration-options/)** - Complete reference
      - **[Dashboard Guide](https://docs.renovatebot.com/key-concepts/dashboard/)** - Understanding this issue
      - **[Merge Confidence](https://docs.renovatebot.com/merge-confidence/)** - Quality scoring
      - **[Dependency Dashboard](https://docs.renovatebot.com/key-concepts/dashboard/)** - Feature overview

      </details>

      <details>
      <summary>ÔøΩ Support & Troubleshooting</summary>

      - **[Action Issues](https://github.com/bfra-me/renovate-action/issues/new)** - Report problems with this action
      - **[Renovate Discussions](https://github.com/renovatebot/renovate/discussions)** - Community support
      - **[Configuration Help](https://docs.renovatebot.com/help/)** - Getting assistance
      - **[Known Issues](https://github.com/bfra-me/renovate-action/issues?q=is%3Aissue+is%3Aopen+label%3Abug)** - Current bugs and workarounds

      </details>

      ---

      <div align="center">

      ü§ñ **Automated dependency management by [@bfra-me's self-hosted Renovate](https://github.com/bfra-me/renovate-action)**

      <sub>Last updated by Renovate ‚Ä¢ [View action configuration](https://github.com/bfra-me/renovate-action/blob/main/action.yaml) ‚Ä¢ [Learn more](https://docs.renovatebot.com/)</sub>

      </div>
  enable-custom-templates:
    description: Enable custom PR and issue templates with @bfra-me branding and CI integration.
    required: false
    default: 'false'
  enable-analytics:
    description: Enable analytics data collection for performance monitoring and reporting.
    required: false
    default: 'false'
  analytics-collection-level:
    description: Set the analytics collection level (basic, detailed, debug).
    required: false
    default: basic

outputs:
  docker-image:
    description: The name of the Renovate Docker image
    value: ${{ steps.configure.outputs.docker-image }}
  renovate-version:
    description: The Renovate version
    value: ${{ steps.configure.outputs.renovate-version }}

runs:
  steps:
    - name: Initialize Analytics
      run: |
        # Initialize analytics tracking
        mkdir -p /tmp/renovate-analytics
        echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")" > /tmp/renovate-analytics/action-start-time.txt

        # Record action start
        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        const actionStart = {
          startTime: '$(cat /tmp/renovate-analytics/action-start-time.txt)',
          repository: '${{ github.repository }}',
          runId: '${{ github.run_id }}',
          workflow: '${{ github.workflow }}',
          eventName: '${{ github.event_name }}',
          actor: '${{ github.actor }}',
          ref: '${{ github.ref }}',
          sha: '${{ github.sha }}'
        };

        fs.writeFileSync(path.join(analyticsDir, 'action-context.json'), JSON.stringify(actionStart, null, 2));
        console.log('Initialized analytics tracking');
        "
      shell: 'bash -Eeuo pipefail {0}'
    - id: get-renovate-app
      name: Get Renovate GitHub App Installation
      uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
      with:
        app-id: ${{ inputs.renovate-app-id }}
        private-key: ${{ inputs.renovate-app-private-key }}
        owner: ${{ github.repository_owner }}

    - name: Record GitHub App Token Generation
      run: |
        # Record API metric for GitHub App token generation
        token_success="${{ steps.get-renovate-app.outputs.token != '' }}"

        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        if (!fs.existsSync(analyticsDir)) {
          fs.mkdirSync(analyticsDir, { recursive: true });
        }

        const apiMetric = {
          endpoint: '/app/installations/{installation_id}/access_tokens',
          method: 'POST',
          startTime: new Date().toISOString(),
          endTime: new Date().toISOString(),
          duration: 0, // GitHub Actions handles the timing
          statusCode: '${token_success}' === 'true' ? 201 : 500,
          success: '${token_success}' === 'true',
          authMethod: 'github-app',
          metadata: {
            repository: '${{ github.repository }}',
            runId: '${{ github.run_id }}',
            appId: 'APP-***', // Obfuscated for security
            appSlug: '${{ steps.get-renovate-app.outputs.app-slug }}',
            operation: 'token-generation'
          }
        };

        const metricsFile = path.join(analyticsDir, 'api-metrics.json');
        let existingMetrics = [];

        try {
          if (fs.existsSync(metricsFile)) {
            existingMetrics = JSON.parse(fs.readFileSync(metricsFile, 'utf8'));
          }
        } catch (error) {
          console.log('Creating new API metrics file');
        }

        existingMetrics.push(apiMetric);
        fs.writeFileSync(metricsFile, JSON.stringify(existingMetrics, null, 2));

        console.log('Recorded GitHub App token generation metric:', JSON.stringify(apiMetric, null, 2));
        "
      shell: 'bash -Eeuo pipefail {0}'

    - name: Configure
      id: configure
      env:
        RENOVATE_VERSION: 41.159.0 # renovate: datasource=docker depName=renovate packageName=ghcr.io/renovatebot/renovate versioning=semver
        autodiscover: ${{ inputs.autodiscover != '' && inputs.autodiscover || 'false' }}
        dry_run: ${{ inputs.dry-run != '' && inputs.dry-run || 'false' }}
        log_level: ${{ inputs.log-level != '' && inputs.log-level || 'info' }}
        print_config: ${{ inputs.print-config != '' && inputs.print-config || 'false' }}
        renovate_app_id: ${{ inputs.renovate-app-id }}
        renovate_app_slug: ${{ steps.get-renovate-app.outputs.app-slug }}
        cache: ${{ inputs.cache == 'true' }}
        enable_custom_templates: ${{ inputs.enable-custom-templates }}
        global_config: ${{ inputs.global-config }}
        pr_body_template: ${{ inputs.pr-body-template }}
        pr_header: ${{ inputs.pr-header }}
        pr_footer: ${{ inputs.pr-footer }}
        dependency_dashboard_header: ${{ inputs.dependency-dashboard-header }}
        dependency_dashboard_footer: ${{ inputs.dependency-dashboard-footer }}
        zzglobal_config: |-
          {
            "allowedCommands": [
              "^(npx )?corepack(?:@\\d+(?:\\.\\d+\\.\\d+)?)? enable$",
              "^npm ci( --force)?( --ignore-scripts)?$",
              "^npm install -g (npm|pnpm|yarn)(?:@\\d+(?:\\.\\d+\\.\\d+)?)?$",
              "^(?:p?npx|pnpm|yarn) prettier(?:@\\d+(?:\\.\\d+\\.\\d+)?)?( --no-color)? --write \\.$",
              "^(pnpm|yarn) install( --force)?( --frozen-lockfile)?( --ignore-scripts)?$",
              "^(?:npm|pnpm|yarn)(?:\\srun)?\\s(?:bootstrap|build(-release)?|clean|fix|format|update-snapshots)$",
              "^yarn install( --force)?( --immutable)?( --immutable-cache)?$",
              "^(?:\\[ -w \\.npmrc \\] && )?git checkout -- \\.npmrc(?: \\|\\| true)?$"
            ],
            "description": [
              "Use the global config preset for the @bfra-me organization.",
              "_See the [self-hosted Renovate action](https://github.com/bfra-me/renovate-action/blob/main/action.yaml) for details._"
            ],
            "onboardingConfig": {
              "$schema": "https://docs.renovatebot.com/renovate-schema.json",
              "extends": ["github>bfra-me/renovate-config"]
            },
            "onboardingConfigFileName": ".github/renovate.json5",
            "onboardingPrTitle": "feat(deps): configure Renovate",
            "onboardingRebaseCheckbox": true
          }
      run: |
        renovate_username="${{ env.renovate_app_slug }}[bot]"
        renovate_git_author_email="${{ env.renovate_app_id }}+${renovate_username}@users.noreply.github.com"
        renovate_git_author="${renovate_username} <${renovate_git_author_email}>"

        # Function to validate JSON
        validate_json() {
          local json_string="$1"
          local context="${2:-config}"

          if [ -z "$json_string" ] || [ "$json_string" = "{}" ]; then
            return 0  # Empty or default JSON is valid
          fi

          # Basic JSON syntax validation
          if ! echo "$json_string" | jq . > /dev/null 2>&1; then
            echo "Error: Invalid JSON syntax in $context" >&2
            return 1  # Invalid JSON
          fi

          # Ensure it's a JSON object (not array or primitive)
          if ! echo "$json_string" | jq -e 'type == "object"' > /dev/null 2>&1; then
            echo "Error: $context must be a JSON object, not $(echo "$json_string" | jq -r 'type')" >&2
            return 1
          fi

          # Check for potentially dangerous fields that users shouldn't override
          local dangerous_fields=("platform" "gitAuthor" "gitIgnoredAuthors" "cacheDir" "repositoryCache")
          for field in "${dangerous_fields[@]}"; do
            if echo "$json_string" | jq -e "has(\"$field\")" > /dev/null 2>&1; then
              echo "Warning: Field '$field' in $context should not be overridden by user config" >&2
            fi
          done

          return 0  # Valid JSON
        }

        # Function to merge global config securely
        merge_global_config() {
          local base_config="$1"
          local user_config="$2"

          # Validate base config first
          if ! validate_json "$base_config" "base config"; then
            echo "Error: Base zzglobal_config is not valid JSON"
            exit 1
          fi

          # If user config is empty or default, just return base config
          if [ -z "$user_config" ] || [ "$user_config" = "{}" ]; then
            echo "$base_config"
            return 0
          fi

          # Validate user config
          if ! validate_json "$user_config" "user global-config"; then
            echo "Warning: User global-config is not valid JSON, falling back to base config" >&2
            echo "$base_config"
            return 0
          fi

          # Extract and preserve critical security fields from base config
          local base_allowed_commands
          base_allowed_commands=$(echo "$base_config" | jq -c '.allowedCommands // []')

          # Extract base onboardingConfig for deep merging
          local base_onboarding_config
          base_onboarding_config=$(echo "$base_config" | jq -c '.onboardingConfig // {}')

          # Extract user onboardingConfig if provided
          local user_onboarding_config
          user_onboarding_config=$(echo "$user_config" | jq -c '.onboardingConfig // {}')

          # Perform deep merge of onboardingConfig
          local merged_onboarding_config
          if [ "$user_onboarding_config" != "{}" ]; then
            echo "Deep merging onboardingConfig..." >&2
            merged_onboarding_config=$(echo "$base_onboarding_config" | jq -c \
              --argjson userOnboarding "$user_onboarding_config" \
              '. * $userOnboarding')
            if [ $? -ne 0 ]; then
              echo "Warning: Failed to merge onboardingConfig, using base config" >&2
              merged_onboarding_config="$base_onboarding_config"
            else
              echo "‚úÖ Successfully merged onboardingConfig" >&2
            fi
          else
            merged_onboarding_config="$base_onboarding_config"
          fi

          # Remove onboardingConfig from user config to prevent double-merging
          local user_config_without_onboarding
          user_config_without_onboarding=$(echo "$user_config" | jq -c 'del(.onboardingConfig)')
          if [ $? -ne 0 ]; then
            echo "Warning: Failed to process user config, using base config" >&2
            echo "$base_config"
            return 0
          fi

          # Merge configs while protecting security fields and using deep-merged onboardingConfig
          local merged_config
          merged_config=$(echo "$base_config" | jq -c \
            --argjson userConfig "$user_config_without_onboarding" \
            --argjson allowedCommands "$base_allowed_commands" \
            --argjson onboardingConfig "$merged_onboarding_config" \
            '. * $userConfig | .allowedCommands = $allowedCommands | .onboardingConfig = $onboardingConfig')

          if [ $? -ne 0 ]; then
            echo "Error: Failed to merge global configs, falling back to base config" >&2
            echo "$base_config"
            return 1
          fi

          # Final validation of merged config
          if ! validate_json "$merged_config" "final merged config"; then
            echo "Error: Merged config failed validation, falling back to base config" >&2
            echo "$base_config"
            return 1
          fi

          echo "‚úÖ Config merge completed successfully" >&2
          echo "$merged_config"
        }

        # Merge user global config with base config
        base_global_config="$zzglobal_config"
        user_global_config="${{ env.global_config }}"

        echo "Processing global configuration..."
        if [ -n "$user_global_config" ] && [ "$user_global_config" != "{}" ]; then
          echo "User provided global-config, merging with base configuration..."
          echo "User config size: $(echo "$user_global_config" | jq -r 'keys | length') keys"
          merged_global_config=$(merge_global_config "$base_global_config" "$user_global_config")
          merge_exit_code=$?
          if [ $merge_exit_code -ne 0 ]; then
            echo "Error: Config merge failed with exit code $merge_exit_code, using base config" >&2
            merged_global_config="$base_global_config"
          else
            echo "‚úÖ Successfully merged user configuration"
          fi
        else
          echo "No user global-config provided, using base configuration..."
          merged_global_config="$base_global_config"
        fi

        # Validate the final merged configuration
        if ! validate_json "$merged_global_config" "merged config"; then
          echo "Error: Merged configuration is invalid, falling back to base config" >&2
          merged_global_config="$base_global_config"
        fi

        # Process template variables and substitute GitHub Actions context
        if [ "${{ env.enable_custom_templates }}" = "true" ]; then
          # Substitute GitHub Actions context variables in templates
          processed_pr_header=$(printf '%s\n' "${pr_header}" | sed "s|{{github.repository}}|${{ github.repository }}|g" | sed "s|{{github.run_id}}|${{ github.run_id }}|g")
          processed_pr_footer=$(printf '%s\n' "${pr_footer}" | sed "s|{{github.repository}}|${{ github.repository }}|g" | sed "s|{{github.run_id}}|${{ github.run_id }}|g")
          processed_pr_body_template=$(printf '%s\n' "${pr_body_template}" | sed "s|{{github.repository}}|${{ github.repository }}|g" | sed "s|{{github.run_id}}|${{ github.run_id }}|g")
          processed_dashboard_header=$(printf '%s\n' "${dependency_dashboard_header}" | sed "s|{{github.repository}}|${{ github.repository }}|g" | sed "s|{{github.run_id}}|${{ github.run_id }}|g")
          processed_dashboard_footer=$(printf '%s\n' "${dependency_dashboard_footer}" | sed "s|{{github.repository}}|${{ github.repository }}|g" | sed "s|{{github.run_id}}|${{ github.run_id }}|g")

          # Escape JSON strings properly using jq
          escaped_pr_header=$(printf '%s\n' "${processed_pr_header}" | jq -Rs .)
          escaped_pr_footer=$(printf '%s\n' "${processed_pr_footer}" | jq -Rs .)
          escaped_pr_body_template=$(printf '%s\n' "${processed_pr_body_template}" | jq -Rs .)
          escaped_dashboard_header=$(printf '%s\n' "${processed_dashboard_header}" | jq -Rs .)
          escaped_dashboard_footer=$(printf '%s\n' "${processed_dashboard_footer}" | jq -Rs .)

          # Validate base config JSON first
          if ! echo "${merged_global_config}" | jq . > /dev/null 2>&1; then
            echo "Error: Merged global config is not valid JSON"
            exit 1
          fi

          # Add templates to global config
          updated_config=$(echo "${merged_global_config}" | jq \
            --argjson prHeader "${escaped_pr_header}" \
            --argjson prFooter "${escaped_pr_footer}" \
            --argjson prBodyTemplate "${escaped_pr_body_template}" \
            --argjson dashboardHeader "${escaped_dashboard_header}" \
            --argjson dashboardFooter "${escaped_dashboard_footer}" \
            '. + {
              "prHeader": $prHeader,
              "prFooter": $prFooter,
              "prBodyTemplate": $prBodyTemplate,
              "dependencyDashboardHeader": $dashboardHeader,
              "dependencyDashboardFooter": $dashboardFooter
            }')

          if [ $? -ne 0 ]; then
            echo "Error: Failed to merge templates into config"
            exit 1
          fi

          final_config="$updated_config"
        else
          final_config="$merged_global_config"
        fi

        # Validate final config
        if ! echo "${final_config}" | jq . > /dev/null 2>&1; then
          echo "Error: Final config is not valid JSON"
          exit 1
        fi

        # Create outputs for this configuration
        sed 's/^[[:space:]]*//' <<EOF >> $GITHUB_OUTPUT
          autodiscover=${{ env.autodiscover }}
          base-branches=${{ inputs.branch && format('["{0}"]', inputs.branch) || '' }}
          cache-dir=${RENOVATE_CACHE_DIR:-/tmp/renovate/cache}
          cache-key=renovate-cache-v$(echo ${{ env.RENOVATE_VERSION }} | cut -d. -f1)
          docker-image=ghcr.io/renovatebot/renovate:${{ env.RENOVATE_VERSION }}
          dry-run=${{ env.dry_run }}
          enable-cache=${{ env.cache }}
          global-config=$(echo "${final_config}" | tr -d '\n')
          log-level=${{ env.log_level }}
          print-config=${{ env.print_config }}
          renovate-git-author-email=${renovate_git_author_email}
          renovate-git-author=${renovate_git_author}
          renovate-username=${renovate_username}
          renovate-version=${{ env.RENOVATE_VERSION }}
        EOF
      shell: 'bash -Eeuo pipefail {0}'

    - name: Restore Renovate Cache
      id: renovate-cache
      if: steps.configure.outputs.enable-cache == 'true'
      uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        enableCrossOsArchive: true
        key: ${{ steps.configure.outputs.cache-key }}
        path: ${{ steps.configure.outputs.cache-dir }}
      env:
        ANALYTICS_CACHE_OPERATION: restore
        ANALYTICS_CACHE_KEY: ${{ steps.configure.outputs.cache-key }}
        ANALYTICS_CACHE_VERSION: ${{ env.RENOVATE_VERSION }}

    - name: Record Cache Restore Metrics
      if: steps.configure.outputs.enable-cache == 'true'
      run: |
        # Record cache restore operation metrics
        cache_hit="${{ steps.renovate-cache.outputs.cache-hit }}"
        cache_size=""

        # Estimate cache size if directory exists
        if [ -d "${{ steps.configure.outputs.cache-dir }}" ]; then
          cache_size=$(du -sb "${{ steps.configure.outputs.cache-dir }}" 2>/dev/null | cut -f1 || echo "0")
        fi

        # Create analytics record using Node.js
        node -e "
        const fs = require('fs');
        const path = require('path');

        // Ensure analytics directory exists
        const analyticsDir = '/tmp/renovate-analytics';
        if (!fs.existsSync(analyticsDir)) {
          fs.mkdirSync(analyticsDir, { recursive: true });
        }

        const cacheMetric = {
          operation: 'restore',
          key: '${{ steps.configure.outputs.cache-key }}',
          version: '${{ env.RENOVATE_VERSION }}',
          startTime: new Date().toISOString(),
          endTime: new Date().toISOString(),
          duration: 0, // Will be calculated by collector
          success: true,
          hit: '${cache_hit}' === 'true',
          size: parseInt('${cache_size}') || 0,
          metadata: {
            repository: '${{ github.repository }}',
            runId: '${{ github.run_id }}',
            workflow: '${{ github.workflow }}'
          }
        };

        const metricsFile = path.join(analyticsDir, 'cache-metrics.json');
        let existingMetrics = [];

        try {
          if (fs.existsSync(metricsFile)) {
            existingMetrics = JSON.parse(fs.readFileSync(metricsFile, 'utf8'));
          }
        } catch (error) {
          console.log('Creating new cache metrics file');
        }

        existingMetrics.push(cacheMetric);
        fs.writeFileSync(metricsFile, JSON.stringify(existingMetrics, null, 2));

        console.log('Recorded cache restore metric:', JSON.stringify(cacheMetric, null, 2));
        "
      shell: 'bash -Eeuo pipefail {0}'

    - name: Prepare Renovate Cache
      if: steps.configure.outputs.enable-cache == 'true'
      run: |
        start_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

        # Record cache prepare start
        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        if (!fs.existsSync(analyticsDir)) {
          fs.mkdirSync(analyticsDir, { recursive: true });
        }

        fs.writeFileSync(path.join(analyticsDir, 'cache-prepare-start.txt'), '${start_time}');
        "

        [ -d /tmp/renovate ] && sudo chown -R runneradmin:root /tmp/renovate || true

        end_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

        # Record cache prepare completion
        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        const startTime = fs.readFileSync(path.join(analyticsDir, 'cache-prepare-start.txt'), 'utf8').trim();
        const endTime = '${end_time}';
        const duration = new Date(endTime).getTime() - new Date(startTime).getTime();

        const cacheMetric = {
          operation: 'prepare',
          key: '${{ steps.configure.outputs.cache-key }}',
          version: '${{ env.RENOVATE_VERSION }}',
          startTime: startTime,
          endTime: endTime,
          duration: duration,
          success: true,
          metadata: {
            repository: '${{ github.repository }}',
            runId: '${{ github.run_id }}',
            workflow: '${{ github.workflow }}'
          }
        };

        const metricsFile = path.join(analyticsDir, 'cache-metrics.json');
        let existingMetrics = [];

        try {
          if (fs.existsSync(metricsFile)) {
            existingMetrics = JSON.parse(fs.readFileSync(metricsFile, 'utf8'));
          }
        } catch (error) {
          console.log('Creating new cache metrics file');
        }

        existingMetrics.push(cacheMetric);
        fs.writeFileSync(metricsFile, JSON.stringify(existingMetrics, null, 2));

        console.log('Recorded cache prepare metric:', JSON.stringify(cacheMetric, null, 2));
        "
      shell: 'bash -Eeuo pipefail {0}'

    - name: Renovate ${{ steps.configure.outputs.renovate-version }}
      uses: renovatebot/github-action@13f127373fd3dc43b41b0979e37ba570d6c2b8f4 # v43.0.0
      env:
        FORCE_COLOR: '3'
        LOG_LEVEL: ${{ steps.configure.outputs.log-level }}
        RENOVATE_AUTODISCOVER: 'true'
        RENOVATE_AUTODISCOVER_FILTER: ${{ steps.configure.outputs.autodiscover == 'false' && github.repository || inputs.autodiscover-filter != '[]' && toJSON(fromJSON(inputs.autodiscover-filter)) || '' }}
        RENOVATE_BASE_BRANCHES: ${{ steps.configure.outputs.base-branches }}
        RENOVATE_USE_BASE_BRANCH_CONFIG: ${{ steps.configure.outputs.base-branches && 'merge' || 'none' }}
        RENOVATE_BRANCH_PREFIX_OLD: renovate-github/
        RENOVATE_BINARY_SOURCE: install
        RENOVATE_CACHE_DIR: ${{ steps.configure.outputs.cache-dir }}
        RENOVATE_CONFIG: ${{ steps.configure.outputs.global-config }}
        RENOVATE_DEPENDENCY_DASHBOARD_FOOTER: '\n- [ ] <!-- manual job -->Check here to trigger a Renovate run on this repository\n'
        RENOVATE_DRY_RUN: ${{ fromJSON(steps.configure.outputs.dry-run) && 'extract' || '' }}
        RENOVATE_GIT_AUTHOR: ${{ steps.configure.outputs.renovate-git-author }}
        RENOVATE_GIT_IGNORED_AUTHORS: |-
          [
            "bot@renovateapp.com",
            "29139614+renovate[bot]@users.noreply.github.com",
            "support@github.com",
            "261136+bfra-me@users.noreply.github.com",
            "118100583+bfra-me[bot]@users.noreply.github.com",
            "137683033+mrbro-bot[bot]@users.noreply.github.com",
            "109017866+fro-bot[bot]@users.noreply.github.com",
            "${{ steps.configure.outputs.renovate-git-author-email }}"
          ]
        RENOVATE_PLATFORM: github
        RENOVATE_PRESET_CACHE_PERSISTENCE: ${{ steps.configure.outputs.enable-cache == 'true' }}
        RENOVATE_PRINT_CONFIG: ${{ steps.configure.outputs.print-config }}
        RENOVATE_REPOSITORY_CACHE: ${{ steps.configure.outputs.enable-cache == 'true' && 'enabled' || 'disabled' }}
        RENOVATE_USERNAME: ${{ steps.configure.outputs.renovate-username }}
      with:
        env-regex: '^(?:CI|FORCE_COLOR|GITHUB_(?:(?!PATH|ENV).)+|(?:HTTPS?|NO)_PROXY|(?:https?|no)_proxy|LOG_LEVEL|NODE_OPTIONS|RENOVATE_\w+|RUNNER_\w+)$'
        docker-cmd-file: '${{ github.action_path }}/docker/entrypoint.sh'
        docker-user: root
        mount-docker-socket: true
        renovate-version: ${{ steps.configure.outputs.renovate-version }}
        token: ${{ steps.get-renovate-app.outputs.token }}

    - name: Finalize Renovate Cache
      if: |
        (success() || failure()) &&
        steps.configure.outputs.enable-cache == 'true' &&
        steps.renovate-cache.outputs.cache-hit != 'true' || github.event_name == 'push'
      env:
        GH_REPO: ${{ github.event.repository.full_name }}
        GH_TOKEN: ${{ steps.get-renovate-app.outputs.token }}
      run: |
        start_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

        # Record cache finalize start
        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        if (!fs.existsSync(analyticsDir)) {
          fs.mkdirSync(analyticsDir, { recursive: true });
        }

        fs.writeFileSync(path.join(analyticsDir, 'cache-finalize-start.txt'), '${start_time}');
        "

        # Fix cache ownership and delete old cache
        [ -d /tmp/renovate ] && sudo chown -R $(whoami) /tmp/renovate

        # Record cache deletion API call start
        api_start_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

        if gh api -X DELETE /repos/{owner}/{repo}/actions/caches?key=${{ steps.configure.outputs.cache-key }}; then
          api_end_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          api_success=true
          api_status=204
          api_error=""
          echo "Successfully deleted cache for $GH_REPO"
        else
          api_end_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          api_success=false
          api_status=500
          api_error="Could not delete cache for $GH_REPO"
          echo "Could not delete cache for $GH_REPO"
        fi

        # Record cache deletion API metric
        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        if (!fs.existsSync(analyticsDir)) {
          fs.mkdirSync(analyticsDir, { recursive: true });
        }

        const duration = new Date('${api_end_time}').getTime() - new Date('${api_start_time}').getTime();

        const apiMetric = {
          endpoint: '/repos/{owner}/{repo}/actions/caches',
          method: 'DELETE',
          startTime: '${api_start_time}',
          endTime: '${api_end_time}',
          duration: duration,
          statusCode: ${api_status},
          success: '${api_success}' === 'true',
          authMethod: 'github-app',
          error: '${api_error}' || undefined,
          metadata: {
            repository: '${{ github.repository }}',
            runId: '${{ github.run_id }}',
            operation: 'cache-deletion',
            cacheKey: '${{ steps.configure.outputs.cache-key }}'.substring(0, 20) + '...'
          }
        };

        const metricsFile = path.join(analyticsDir, 'api-metrics.json');
        let existingMetrics = [];

        try {
          if (fs.existsSync(metricsFile)) {
            existingMetrics = JSON.parse(fs.readFileSync(metricsFile, 'utf8'));
          }
        } catch (error) {
          console.log('Creating new API metrics file');
        }

        existingMetrics.push(apiMetric);
        fs.writeFileSync(metricsFile, JSON.stringify(existingMetrics, null, 2));

        console.log('Recorded cache deletion API metric:', JSON.stringify(apiMetric, null, 2));
        "

        end_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        cache_operation_success=$?

        # Record cache finalize completion
        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        const startTime = fs.readFileSync(path.join(analyticsDir, 'cache-finalize-start.txt'), 'utf8').trim();
        const endTime = '${end_time}';
        const duration = new Date(endTime).getTime() - new Date(startTime).getTime();

        const cacheMetric = {
          operation: 'finalize',
          key: '${{ steps.configure.outputs.cache-key }}',
          version: '${{ env.RENOVATE_VERSION }}',
          startTime: startTime,
          endTime: endTime,
          duration: duration,
          success: '${cache_operation_success}' === '0',
          metadata: {
            repository: '${{ github.repository }}',
            runId: '${{ github.run_id }}',
            workflow: '${{ github.workflow }}',
            cacheHit: '${{ steps.renovate-cache.outputs.cache-hit }}',
            eventName: '${{ github.event_name }}'
          }
        };

        const metricsFile = path.join(analyticsDir, 'cache-metrics.json');
        let existingMetrics = [];

        try {
          if (fs.existsSync(metricsFile)) {
            existingMetrics = JSON.parse(fs.readFileSync(metricsFile, 'utf8'));
          }
        } catch (error) {
          console.log('Creating new cache metrics file');
        }

        existingMetrics.push(cacheMetric);
        fs.writeFileSync(metricsFile, JSON.stringify(existingMetrics, null, 2));

        console.log('Recorded cache finalize metric:', JSON.stringify(cacheMetric, null, 2));
        "
      shell: 'bash -Eeuo pipefail {0}'

    - name: Save Renovate cache
      if: |
        (success() || failure()) &&
        steps.configure.outputs.enable-cache == 'true' &&
        steps.renovate-cache.outputs.cache-hit != 'true' || github.event_name == 'push'
      uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        enableCrossOsArchive: true
        key: ${{ steps.configure.outputs.cache-key }}
        path: ${{ steps.configure.outputs.cache-dir }}

    - name: Record Cache Save Metrics
      if: |
        (success() || failure()) &&
        steps.configure.outputs.enable-cache == 'true' &&
        steps.renovate-cache.outputs.cache-hit != 'true' || github.event_name == 'push'
      run: |
        # Calculate cache size after save
        cache_size=""
        cache_save_success=true

        if [ -d "${{ steps.configure.outputs.cache-dir }}" ]; then
          cache_size=$(du -sb "${{ steps.configure.outputs.cache-dir }}" 2>/dev/null | cut -f1 || echo "0")
        else
          cache_save_success=false
        fi

        # Record cache save operation metrics
        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';
        if (!fs.existsSync(analyticsDir)) {
          fs.mkdirSync(analyticsDir, { recursive: true });
        }

        const cacheMetric = {
          operation: 'save',
          key: '${{ steps.configure.outputs.cache-key }}',
          version: '${{ env.RENOVATE_VERSION }}',
          startTime: new Date().toISOString(),
          endTime: new Date().toISOString(),
          duration: 0, // Cache save duration is handled by Actions
          success: '${cache_save_success}' === 'true',
          size: parseInt('${cache_size}') || 0,
          metadata: {
            repository: '${{ github.repository }}',
            runId: '${{ github.run_id }}',
            workflow: '${{ github.workflow }}',
            cacheHit: '${{ steps.renovate-cache.outputs.cache-hit }}',
            eventName: '${{ github.event_name }}'
          }
        };

        const metricsFile = path.join(analyticsDir, 'cache-metrics.json');
        let existingMetrics = [];

        try {
          if (fs.existsSync(metricsFile)) {
            existingMetrics = JSON.parse(fs.readFileSync(metricsFile, 'utf8'));
          }
        } catch (error) {
          console.log('Creating new cache metrics file');
        }

        existingMetrics.push(cacheMetric);
        fs.writeFileSync(metricsFile, JSON.stringify(existingMetrics, null, 2));

        console.log('Recorded cache save metric:', JSON.stringify(cacheMetric, null, 2));
        "
      shell: 'bash -Eeuo pipefail {0}'

    - name: Collect Analytics Data
      if: always()
      run: |
        # Collect and consolidate all analytics data
        end_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        start_time=$(cat /tmp/renovate-analytics/action-start-time.txt 2>/dev/null || echo "${end_time}")

        node -e "
        const fs = require('fs');
        const path = require('path');

        const analyticsDir = '/tmp/renovate-analytics';

        // Load existing data
        let cacheMetrics = [];
        let dockerMetrics = [];
        let apiMetrics = [];
        let failureMetrics = [];

        try {
          if (fs.existsSync(path.join(analyticsDir, 'cache-metrics.json'))) {
            cacheMetrics = JSON.parse(fs.readFileSync(path.join(analyticsDir, 'cache-metrics.json'), 'utf8'));
          }
          if (fs.existsSync(path.join(analyticsDir, 'docker-metrics.json'))) {
            dockerMetrics = JSON.parse(fs.readFileSync(path.join(analyticsDir, 'docker-metrics.json'), 'utf8'));
          }
          if (fs.existsSync(path.join(analyticsDir, 'api-metrics.json'))) {
            apiMetrics = JSON.parse(fs.readFileSync(path.join(analyticsDir, 'api-metrics.json'), 'utf8'));
          }
          if (fs.existsSync(path.join(analyticsDir, 'failure-metrics.json'))) {
            failureMetrics = JSON.parse(fs.readFileSync(path.join(analyticsDir, 'failure-metrics.json'), 'utf8'));
          }
        } catch (error) {
          console.log('Error reading analytics files:', error.message);
        }

        const duration = new Date('${end_time}').getTime() - new Date('${start_time}').getTime();

        // Create final analytics event
        const analyticsEvent = {
          id: 'action-' + '${end_time}'.replace(/[^0-9]/g, ''),
          timestamp: '${end_time}',
          repository: {
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}',
            fullName: '${{ github.repository }}',
            id: '${{ github.event.repository.id }}',
            visibility: '${{ github.event.repository.private }}' === 'true' ? 'private' : 'public'
          },
          workflow: {
            runId: '${{ github.run_id }}',
            runNumber: '${{ github.run_number }}',
            workflowName: '${{ github.workflow }}',
            eventName: '${{ github.event_name }}',
            ref: '${{ github.ref }}',
            sha: '${{ github.sha }}',
            actor: '${{ github.actor }}'
          },
          cache: cacheMetrics,
          docker: dockerMetrics,
          api: apiMetrics,
          failures: failureMetrics,
          action: {
            startTime: '${start_time}',
            endTime: '${end_time}',
            duration: duration,
            success: '${{ job.status }}' === 'success',
            renovateVersion: '${{ env.RENOVATE_VERSION }}',
            actionVersion: '${{ github.sha }}',
            exitCode: 0
          },
          schemaVersion: '1.0.0'
        };

        // Save consolidated analytics
        fs.writeFileSync(path.join(analyticsDir, 'analytics-event.json'), JSON.stringify(analyticsEvent, null, 2));

        console.log('üìä Analytics Summary:');
        console.log('- Cache operations:', cacheMetrics.length);
        console.log('- Docker operations:', dockerMetrics.length);
        console.log('- API requests:', apiMetrics.length);
        console.log('- Failures recorded:', failureMetrics.length);
        console.log('- Total duration:', Math.round(duration / 1000) + 's');
        console.log('');
        console.log('Analytics data saved to /tmp/renovate-analytics/analytics-event.json');
        "
      shell: 'bash -Eeuo pipefail {0}'
  using: composite
